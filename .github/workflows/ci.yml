name: Continuous Integration
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test with Pester
        shell: pwsh
        run: |
          ./setup.ps1
          Invoke-Pester ./Tests/ -Passthru | Export-CliXml -Path Unit.Tests.xml

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-Unit-Tests
          path: Unit.Tests.xml

  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Lint modules
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path $env:GITHUB_WORKSPACE\modules -Recurse -Outvariable issues

          $errors   = $issues.Where({$_.Severity -eq 'Error'})
          $warnings = $issues.Where({$_.Severity -eq 'Warning'})

          if ($errors) {
              Write-Error "Modules contained $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
          } else {
              Write-Output "Modules contained $($errors.Count) errors and $($warnings.Count) warnings total."
          }

      - name: Lint scripts
        shell: pwsh
        if: ${{ always() }}
        run: |
          Invoke-ScriptAnalyzer -Path $env:GITHUB_WORKSPACE\scripts\*.ps1 -Outvariable issues

          $errors   = $issues.Where({$_.Severity -eq 'Error'})
          $warnings = $issues.Where({$_.Severity -eq 'Warning'})

          if ($errors) {
              Write-Error "Scripts contained $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
          } else {
              Write-Output "Scripts contained $($errors.Count) errors and $($warnings.Count) warnings total."
          }

  publish:
    name: Publish
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    needs:
      - lint
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Publish
        shell: pwsh
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
          REPOSITORY_NAME: powershell-poc
          REPOSITORY_URI: https://pkgs.dev.azure.com/andyfeller/powershell-poc/_packaging/powershell-poc/nuget/v2
        run: |
          Function Update-ScriptFileInfoVersion {
            param([string]$path, [int]$newRevision)

            $currentVersion = Test-ScriptFileInfo -Path $path | Select-Object -ExpandProperty Version
            $newVersion = [System.Version]$("{0}.{1}.{2}.{3}" -f $currentVersion.Major, $currentVersion.Minor, $currentVersion.Build, $newRevision)

            Update-ScriptFileInfo -Path $path -ModuleVersion $newVersion
          }

          Function Update-ModuleManifestVersion {
            param([string]$path, [int]$newRevision)

            $currentVersion = Test-ModuleManifest -Path $path | Select-Object -ExpandProperty Version
            $newVersion = [System.Version]$("{0}.{1}.{2}.{3}" -f $currentVersion.Major, $currentVersion.Minor, $currentVersion.Build, $newRevision)

            Update-ModuleManifest -Path $path -ModuleVersion $newVersion
          }

          ./setup.ps1

          # Register Powershell repository; needed for publishing
          $username = 'andyfeller'
          $credential = New-Object System.Management.Automation.PSCredential -ArgumentList $username, (ConvertTo-SecureString -AsPlainText $env:NUGET_KEY -Force)

          Register-PackageSource -Name $env:REPOSITORY_NAME -Location $env:REPOSITORY_URI -Trusted -SkipValidate -ProviderName NuGet -Credential $credential
          Register-PSRepository -Name $env:REPOSITORY_NAME -SourceLocation $env:REPOSITORY_URI -PublishLocation $env:REPOSITORY_URI -ScriptSourceLocation $env:REPOSITORY_URI -ScriptPublishLocation $env:REPOSITORY_URI -Credential $credential -InstallationPolicy Trusted
          dotnet nuget add source $env:REPOSITORY_URI -n $env:REPOSITORY_NAME -u $username -p $env:NUGET_KEY --store-password-in-clear-text

          # Publish PowerShell modules and scripts
          $modules = Get-ChildItem "$env:GITHUB_WORKSPACE\modules" -Directory
          $scripts = Get-ChildItem "$env:GITHUB_WORKSPACE\scripts" -Filter *.ps1

          foreach ($module in $modules) {
            Update-ModuleManifestVersion -Path $(Get-ChildItem $module -Filter *.psd1) -NewRevision $env:GITHUB_RUN_NUMBER
            Publish-Module -Repository $env:REPOSITORY_NAME -Path $module -ProjectUri https://github.com/${{ github.repository }} -NuGetApiKey 'n/a' -Verbose -Force
          }

          foreach ($script in $scripts) {
            Update-ScriptFileInfoVersion -Path $script -NewRevision $env:GITHUB_RUN_NUMBER
            Publish-Script -Repository $env:REPOSITORY_NAME -Path $script -NuGetApiKey 'n/a' -Verbose -Force
          }