name: Continuous Integration
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test with Pester
        shell: pwsh
        run: |
          ./setup.ps1
          Invoke-Pester ./Tests/ -Passthru | Export-CliXml -Path Unit.Tests.xml

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-Unit-Tests
          path: Unit.Tests.xml

  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
          path: "~/.local/share/powershell/Modules"
          key: ${{ runner.os }}-PSScriptAnalyzer

      - name: Install PSScriptAnalyzer module
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -ErrorAction Stop

      - name: Lint with PSScriptAnalyzer
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path *.ps1 -Recurse -Outvariable issues

          $errors   = $issues.Where({$_.Severity -eq 'Error'})
          $warnings = $issues.Where({$_.Severity -eq 'Warning'})

          if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
          } else {
              Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
          }

  publish:
    name: Publish
    runs-on: ubuntu-latest
    if: ${{ github.event == 'push' }}
    needs:
      - lint
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Publish
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
        shell: pwsh
        run: |
          ./setup.ps1
          Publish-Module -Path PSHello -ProjectUri https://github.com/${{ github.repository_owner }} -NuGetApiKey $env:NUGET_KEY -Verbose
